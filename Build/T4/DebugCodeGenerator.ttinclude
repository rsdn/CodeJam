<#@ import namespace="System.IO" #>
<#@ include file="Autogenerated.ttinclude" #>
<#@ include file="Transform.ttinclude" #><#+

	private void Run()
	{
		const string message =
			"The name of the template should follow the pattern 'Debug' + AssertionFile + '.tt'. " +
			"The name of the assertion class should be suffixed with 'Code'. " +
			"For example, for Code.cs the template should be named DebugCode.tt " +
			"and for EnumerableCode.cs the template should be named DebugEnumerableCode.tt.";

		var newClassName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
		if (!newClassName.StartsWith("Debug", StringComparison.Ordinal) ||
			!newClassName.EndsWith("Code", StringComparison.Ordinal))
		{
			throw new InvalidOperationException("File " + newClassName + ": " + message);
		}

		var oldClassName = newClassName.Substring("Debug".Length);
		Run(
			oldClassName + ".cs",
			oldClassName,
			newClassName);
	}

	private void Run(string fileName, string oldClassName, string newClassName)
	{
		WriteLine(@"using static CodeJam.DebugCode;");
		WriteLine("");

		Transform(
			fileName,
			new ReplaceInfo // Rename the class (add Debug prefix to the name)
			{
				Pattern = "class " + oldClassName,
				Replacement = "class " + newClassName,
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // Adds [Conditional(DebugCondition)] attribute
			{
				Pattern = "[DebuggerHidden",
				Replacement = "[Conditional(DebugCondition), DebuggerHidden",
				ThrowOnFail = true,
				EscapePattern = true
			});
	}
#>
