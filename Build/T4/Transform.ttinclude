<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Concurrent" #>
<#@ import namespace="System.Text.RegularExpressions" #><#+

	internal enum ReplaceMode
	{
		Normal, Swap, Ignore
	}

	internal enum MatchMode
	{
		Normal, WholeWord, WholeLine
	}

	internal class ReplaceInfo
	{
		public string Pattern { get; set; }
		public string Replacement { get; set; }
		public bool ThrowOnFail { get; set; }
		public bool EscapePattern { get; set; }
		public ReplaceMode Replace { get; set; }
		public MatchMode Match { get; set; }

		public bool SwapMode => Replace == ReplaceMode.Swap;
		public bool IgnoreMode => Replace == ReplaceMode.Ignore;
		public bool WholeWordMode => Match == MatchMode.WholeWord;
		public bool WholeLineMode => Match == MatchMode.WholeLine;
	}

	// ReSharper disable UnusedMember.Local
	private void Transform(string sourceFileName, ReplaceInfo[] additionalReplaces, params ReplaceInfo[] replaces)
	{
		// DONTTOUCH: additional replaces should be applied BEFORE normal replaces
		var replaceList = new List<ReplaceInfo>(additionalReplaces);
		replaceList.AddRange(replaces);
		Transform(sourceFileName, replaceList.ToArray());
	}

	private void Transform(string sourceFileName, params ReplaceInfo[] replaces)
	{
		var filePath = Host.ResolvePath(sourceFileName);
		if (!File.Exists(filePath))
		{
			throw new FileNotFoundException("File '" + filePath + "' does not exist.");
		}

		var placeholderReplaces = new ConcurrentDictionary<string, string>();
		Func<string, ReplaceInfo, string> replaceWithPlaceholdersCore = (text, replaceInfo) =>
		{
			var pattern = PreparePattern(
				replaceInfo.SwapMode ? replaceInfo.Replacement : replaceInfo.Pattern,
				replaceInfo);
			var replacement = replaceInfo.SwapMode ? replaceInfo.Pattern : null;

			var newText = Regex.Replace(
				text,
				pattern,
				m => placeholderReplaces.GetOrAdd(replacement ?? m.Value, _ => "%" + Guid.NewGuid() + "%"));

			if (replaceInfo.ThrowOnFail && newText == text)
				throw new InvalidOperationException("The match for " + pattern + " not found");

			return newText;
		};

		Func<string, ReplaceInfo, string> replaceCore = (text, replaceInfo) =>
		{
			var pattern = PreparePattern(replaceInfo.Pattern, replaceInfo);
			var replacement = replaceInfo.Replacement;

			var newText = Regex.Replace(text, pattern, replacement);

			if (replaceInfo.ThrowOnFail && newText == text)
				throw new InvalidOperationException("The match for " + pattern + " not found");

			return newText;
		};

		var sourceText = File.ReadAllText(filePath);

		// swap-or-ignore patterns.
		foreach (var replaceInfo in replaces.Where(r => r.IgnoreMode || r.SwapMode))
		{
			sourceText = replaceWithPlaceholdersCore(sourceText, replaceInfo);
		}

		// usual replaces
		foreach (var replaceInfo in replaces.Where(r => !r.IgnoreMode))
		{
			sourceText = replaceCore(sourceText, replaceInfo);
		}

		// restore placeholders values
		foreach (var placeholderReplace in placeholderReplaces)
		{
			sourceText = sourceText.Replace(placeholderReplace.Value, placeholderReplace.Key);
		}

		Write(sourceText);
	}

	private string PreparePattern(string pattern, ReplaceInfo replaceInfo)
	{
		if (replaceInfo.SwapMode || replaceInfo.EscapePattern)
		{
			pattern = Regex.Escape(pattern);
		}

		pattern = replaceInfo.WholeWordMode
			? @"(?<=\W|^)" + pattern + @"(?=\W|$)"
			: pattern;

		pattern = replaceInfo.WholeLineMode
			? @".*" +  pattern + @".*[\r\n]+"
			: pattern;

		return pattern;
	}
#>