//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class StringExtensions
	{
		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a control.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a control
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsControl([NotNull] this string str, [NonNegativeValue] int index) => char.IsControl(str, index);

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a highsurrogate.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a highsurrogate
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsHighSurrogate([NotNull] this string str, [NonNegativeValue] int index) => char.IsHighSurrogate(str, index);

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a lowsurrogate.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a lowsurrogate
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsLowSurrogate([NotNull] this string str, [NonNegativeValue] int index) => char.IsLowSurrogate(str, index);

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a digit.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a digit
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsDigit([NotNull] this string str, [NonNegativeValue] int index) => char.IsDigit(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a digit.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a digit; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsDigit([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsDigit())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a letter.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a letter
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsLetter([NotNull] this string str, [NonNegativeValue] int index) => char.IsLetter(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a letter.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a letter; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsLetter([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsLetter())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a letterordigit.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a letterordigit
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsLetterOrDigit([NotNull] this string str, [NonNegativeValue] int index) => char.IsLetterOrDigit(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a letterordigit.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a letterordigit; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsLetterOrDigit([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsLetterOrDigit())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a lower.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a lower
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsLower([NotNull] this string str, [NonNegativeValue] int index) => char.IsLower(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a lower.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a lower; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsLower([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsLower())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a upper.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a upper
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsUpper([NotNull] this string str, [NonNegativeValue] int index) => char.IsUpper(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a upper.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a upper; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsUpper([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsUpper())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a number.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a number
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsNumber([NotNull] this string str, [NonNegativeValue] int index) => char.IsNumber(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a number.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a number; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsNumber([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsNumber())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a punctuation.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a punctuation
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsPunctuation([NotNull] this string str, [NonNegativeValue] int index) => char.IsPunctuation(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a punctuation.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a punctuation; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsPunctuation([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsPunctuation())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a separator.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a separator
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsSeparator([NotNull] this string str, [NonNegativeValue] int index) => char.IsSeparator(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a separator.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a separator; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsSeparator([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsSeparator())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a surrogate.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a surrogate
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsSurrogate([NotNull] this string str, [NonNegativeValue] int index) => char.IsSurrogate(str, index);

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a surrogatepair.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a surrogatepair
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsSurrogatePair([NotNull] this string str, [NonNegativeValue] int index) => char.IsSurrogatePair(str, index);

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a symbol.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a symbol
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsSymbol([NotNull] this string str, [NonNegativeValue] int index) => char.IsSymbol(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a symbol.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a symbol; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsSymbol([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsSymbol())
					return false;
			}
			return true;
		}

		/// <summary>
		/// Indicates whether the character at the specified position in a specified string is categorized as a whitespace.
		/// </summary>
		/// <param name="str">A string.</param>
		/// <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
		/// <returns>
		/// <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a whitespace
		/// character; otherwise, <c>false</c>.
		/// </returns>
		[Pure]
		public static bool IsWhiteSpace([NotNull] this string str, [NonNegativeValue] int index) => char.IsWhiteSpace(str, index);

		/// <summary>
		/// Indicates whether all characters in a specified string is categorized as a whitespace.
		/// </summary>
		/// <param name="str">A string</param>
		/// <returns>
		/// <c>true</c> if all character in <paramref name="str"/> is a whitespace; otherwise, <c>false</c>.
		/// </returns>
		public static bool IsWhiteSpace([NotNull] this string str)
		{
			Code.NotNull(str, nameof(str));

			foreach (var chr in str)
			{
				if (!chr.IsWhiteSpace())
					return false;
			}
			return true;
		}

	}
}
