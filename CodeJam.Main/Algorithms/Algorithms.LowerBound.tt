<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
using System;
using System.Collections.Generic;

using JetBrains.Annotations;

namespace CodeJam
{
	partial class Algorithms
	{
<#
	foreach (var type in new[] { "float", "double", "TimeSpan", "DateTime", "DateTimeOffset" })
	{
#>

		#region <#= type #>
<#
		GenerateMethods(type);
#>
		#endregion
<#
	}
#>
	}
}
<#+
private void GenerateMethods(string type)
{
#>
		/// <summary>
		/// Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
		/// or list.Count if no such i exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The lower bound for the value</returns>
		[Pure]
		public static int LowerBound([NotNull, InstantHandle] this IList<<#= type #>> list, <#= type #> value) =>
			list.LowerBound(value, 0);

		/// <summary>
		/// Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
		/// or list.Count if no such i exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The lower bound for the value</returns>
		[Pure]
		public static int LowerBound([NotNull, InstantHandle] this IList<<#= type #>> list, <#= type #> value, [NonNegativeValue] int startIndex) =>
			list.LowerBound(value, startIndex, list.Count);

		/// <summary>
		/// Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
		/// or endIndex if no such i exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The lower bound for the value</returns>
		[Pure]
		public static int LowerBound(
			[NotNull, InstantHandle] this IList<<#= type #>> list,
			<#= type #> value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] >= value)
				{
					endIndex = median;
				}
				else
				{
					startIndex = median + 1;
				}
			}
			return startIndex;
		}
<#+
}
#>
