//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using CodeJam.Ranges;

using JetBrains.Annotations;

using Range = CodeJam.Ranges.Range;

namespace CodeJam
{
	partial class Algorithms
	{
		#region float
		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<float> list, float value) =>
			list.EqualRange(value, 0);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<float> list, float value, [NonNegativeValue] int startIndex) =>
			list.EqualRange(value, startIndex, list.Count);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
		///		j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange(
			[NotNull, InstantHandle] this IList<float> list,
			float value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			var upperBoundStartIndex = startIndex;
			var upperBoundEndIndex = endIndex;

			// the loop locates the lower bound at the same time restricting the range for upper bound search
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] < value)
				{
					startIndex = median + 1;
					upperBoundStartIndex = startIndex;
				}
				else if (list[median] == value)
				{
					endIndex = median;
					upperBoundStartIndex = endIndex + 1;
				}
				else
				{
					endIndex = median;
					upperBoundEndIndex = endIndex;
				}
			}
			return Range.Create(startIndex, UpperBoundCore(list, value, upperBoundStartIndex, upperBoundEndIndex));
		}
		#endregion

		#region double
		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<double> list, double value) =>
			list.EqualRange(value, 0);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<double> list, double value, [NonNegativeValue] int startIndex) =>
			list.EqualRange(value, startIndex, list.Count);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
		///		j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange(
			[NotNull, InstantHandle] this IList<double> list,
			double value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			var upperBoundStartIndex = startIndex;
			var upperBoundEndIndex = endIndex;

			// the loop locates the lower bound at the same time restricting the range for upper bound search
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] < value)
				{
					startIndex = median + 1;
					upperBoundStartIndex = startIndex;
				}
				else if (list[median] == value)
				{
					endIndex = median;
					upperBoundStartIndex = endIndex + 1;
				}
				else
				{
					endIndex = median;
					upperBoundEndIndex = endIndex;
				}
			}
			return Range.Create(startIndex, UpperBoundCore(list, value, upperBoundStartIndex, upperBoundEndIndex));
		}
		#endregion

		#region TimeSpan
		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<TimeSpan> list, TimeSpan value) =>
			list.EqualRange(value, 0);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<TimeSpan> list, TimeSpan value, [NonNegativeValue] int startIndex) =>
			list.EqualRange(value, startIndex, list.Count);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
		///		j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange(
			[NotNull, InstantHandle] this IList<TimeSpan> list,
			TimeSpan value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			var upperBoundStartIndex = startIndex;
			var upperBoundEndIndex = endIndex;

			// the loop locates the lower bound at the same time restricting the range for upper bound search
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] < value)
				{
					startIndex = median + 1;
					upperBoundStartIndex = startIndex;
				}
				else if (list[median] == value)
				{
					endIndex = median;
					upperBoundStartIndex = endIndex + 1;
				}
				else
				{
					endIndex = median;
					upperBoundEndIndex = endIndex;
				}
			}
			return Range.Create(startIndex, UpperBoundCore(list, value, upperBoundStartIndex, upperBoundEndIndex));
		}
		#endregion

		#region DateTime
		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<DateTime> list, DateTime value) =>
			list.EqualRange(value, 0);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<DateTime> list, DateTime value, [NonNegativeValue] int startIndex) =>
			list.EqualRange(value, startIndex, list.Count);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
		///		j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange(
			[NotNull, InstantHandle] this IList<DateTime> list,
			DateTime value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			var upperBoundStartIndex = startIndex;
			var upperBoundEndIndex = endIndex;

			// the loop locates the lower bound at the same time restricting the range for upper bound search
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] < value)
				{
					startIndex = median + 1;
					upperBoundStartIndex = startIndex;
				}
				else if (list[median] == value)
				{
					endIndex = median;
					upperBoundStartIndex = endIndex + 1;
				}
				else
				{
					endIndex = median;
					upperBoundEndIndex = endIndex;
				}
			}
			return Range.Create(startIndex, UpperBoundCore(list, value, upperBoundStartIndex, upperBoundEndIndex));
		}
		#endregion

		#region DateTimeOffset
		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<DateTimeOffset> list, DateTimeOffset value) =>
			list.EqualRange(value, 0);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
		///		j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange([NotNull, InstantHandle] this IList<DateTimeOffset> list, DateTimeOffset value, [NonNegativeValue] int startIndex) =>
			list.EqualRange(value, startIndex, list.Count);

		/// <summary>
		/// Returns the tuple of [i, j] where
		///		i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
		///		j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
		/// </summary>
		/// <param name="list">The sorted list</param>
		/// <param name="value">The value to compare</param>
		/// <param name="startIndex">The minimum index</param>
		/// <param name="endIndex">The upper bound for the index (not included)</param>
		/// <returns>The tuple of lower bound and upper bound for the value</returns>
		[Pure]
		public static Range<int> EqualRange(
			[NotNull, InstantHandle] this IList<DateTimeOffset> list,
			DateTimeOffset value,
			[NonNegativeValue] int startIndex,
			[NonNegativeValue] int endIndex)
		{
			Code.NotNull(list, nameof(list));
			ValidateIndicesRange(startIndex, endIndex, list.Count);
			var upperBoundStartIndex = startIndex;
			var upperBoundEndIndex = endIndex;

			// the loop locates the lower bound at the same time restricting the range for upper bound search
			while (startIndex < endIndex)
			{
				var median = startIndex + (endIndex - startIndex) / 2;
				if (list[median] < value)
				{
					startIndex = median + 1;
					upperBoundStartIndex = startIndex;
				}
				else if (list[median] == value)
				{
					endIndex = median;
					upperBoundStartIndex = endIndex + 1;
				}
				else
				{
					endIndex = median;
					upperBoundEndIndex = endIndex;
				}
			}
			return Range.Create(startIndex, UpperBoundCore(list, value, upperBoundStartIndex, upperBoundEndIndex));
		}
		#endregion

	}
}
