<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
using System;
using System.Runtime.CompilerServices;

using JetBrains.Annotations;

using static CodeJam.Targeting.MethodImplOptionsEx;

namespace CodeJam
{
	partial class Algorithms
	{
<#
	var items = new[]
	{
		new { Type = "byte", UseMath = true },
		new { Type = "sbyte", UseMath = true },
		new { Type = "short", UseMath = true },
		new { Type = "ushort", UseMath = true },
		new { Type = "int", UseMath = true },
		new { Type = "uint", UseMath = true },
		new { Type = "long", UseMath = true },
		new { Type = "ulong", UseMath = true },
		new { Type = "float", UseMath = true },
		new { Type = "double", UseMath = true },
		new { Type = "decimal", UseMath = true },
		new { Type = "TimeSpan", UseMath = false },
		new { Type = "DateTime", UseMath = false },
		new { Type = "DateTimeOffset", UseMath = false }
	};

	foreach (var item in items)
	{
#>
		#region <#= item.Type #>
<#
		GenerateMethods(item.Type, item.UseMath);
#>
		#endregion

<#
	}
#>
	}
}
<#+
private void GenerateMethods(string type, bool useMath)
{
#>
		/// <summary>
		/// Compares two values and returns minimal one.
		/// </summary>
		/// <param name="value1">Value 1.</param>
		/// <param name="value2">Value 2.</param>
		/// <returns>Minimal value.</returns>
		[Pure]
		[MethodImpl(AggressiveInlining)]
		public static <#=type#> Min(<#=type#> value1, <#=type#> value2) =>
<#+ if (useMath) #>
			Math.Min(value1, value2);
<#+ else #>
			value1 <= value2 ? value1 : value2;
<#+ #>

		/// <summary>
		/// Compares two values and returns maximal one.
		/// </summary>
		/// <param name="value1">Value 1.</param>
		/// <param name="value2">Value 2.</param>
		/// <returns>Minimal value.</returns>
		[Pure]
		[MethodImpl(AggressiveInlining)]
		public static <#=type#> Max(<#=type#> value1, <#=type#> value2) =>
<#+ if (useMath) #>
			Math.Max(value1, value2);
<#+ else #>
			value1 >= value2 ? value1 : value2;
<#+
}
#>
