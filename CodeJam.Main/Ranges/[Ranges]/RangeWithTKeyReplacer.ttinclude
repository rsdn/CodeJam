<#@ import namespace="System.IO" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)Build\T4\Transform.ttinclude" #><#+
	// ReSharper disable UnusedMember.Local
	private void Run(string sourceFileName, params ReplaceInfo[] additionalReplaces) =>
		Transform(
			sourceFileName,
			additionalReplaces,
			new ReplaceInfo // region for non-updateable text
			{
				Pattern = @"(?s)\#region T4\-dont\-replace.*?\#endregion",
				Replace = ReplaceMode.Ignore
			},
			new ReplaceInfo // Fix generic params
			{
				Pattern = @"(?<!(?:BoundaryTo<|BoundaryFrom<|Comparer<|Func<T, ))T>",
				Replacement = "T, TKey>",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix generic params XML docs
			{
				Pattern = @"(\r\n.+?)(<typeparam name=""T"">(?:.|\r|\n)+?</typeparam>)",
				Replacement = @"$1$2$1<typeparam name=""TKey"">The type of the range key</typeparam>",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix method signature
			{
				Pattern = @"(T>? to(?:Value)?)(\)|,)",
				Replacement = @"$1, TKey key$2",
				ThrowOnFail = false
			},
			new ReplaceInfo // Fix method XML docs
			{
				Pattern = @"(\r\n.+?)(<param name=""to(?:Value)?"">(?:.|\r|\n)+?</param>)",
				Replacement = @"$1$2$1<param name=""key"">The value of the range key.</param>",
				ThrowOnFail = false
			},
			new ReplaceInfo // Fix parameter passing
			{
				Pattern = @"(,\s+to(?:Value)?)\)",
				Replacement = @"$1, key)",
				ThrowOnFail = false
			});

	private void RunRangeExtensions(string sourceFileName, params ReplaceInfo[] additionalReplaces) =>
		Transform(
			sourceFileName,
			additionalReplaces,
			new ReplaceInfo // region for non-updateable text
			{
				Pattern = @"(?s)\#region T4\-dont\-replace.*?\#endregion",
				Replace = ReplaceMode.Ignore
			},
			new ReplaceInfo // Range<T, TKey>
			{
				Pattern = "Range<T([^>,]*?)>",
				Replacement = "Range<T$1, TKey>",
				ThrowOnFail = true,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // CompositeRange<T, TKey>
			{
				Pattern = "CompositeRange<T([^>,]*?)>",
				Replacement = "CompositeRange<T$1, TKey>",
				ThrowOnFail = false,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // RangeIntersection<T, TKey>
			{
				Pattern = "RangeIntersection<T([^>,]*?)>",
				Replacement = "RangeIntersection<T$1, TKey>",
				ThrowOnFail = false,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // SomeMethod<T, TKey2
			{
				Pattern = @"(static .+?)<T([^>]*?)>\(",
				Replacement = "$1<T, TKey$2>(",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix generic params XML docs
			{
				Pattern = @"(\r\n.+?)(<typeparam name=""T"">(?:.|\r|\n)*?</typeparam>)",
				Replacement = @"$1$2$1<typeparam name=""TKey"">The type of the range key</typeparam>",
				ThrowOnFail = true
			});

	private void RunRangeOperations(string sourceFileName, params ReplaceInfo[] additionalReplaces) =>
		Transform(
			sourceFileName,
			additionalReplaces,
			new ReplaceInfo // region for non-updateable text
			{
				Pattern = @"(?s)\#region T4\-dont\-replace.*?\#endregion",
				Replace = ReplaceMode.Ignore
			},
			new ReplaceInfo // Range<T, TKey>
			{
				Pattern = "Range<T([^>,]*?)>",
				Replacement = "Range<T$1, TKey>",
				ThrowOnFail = true,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // CompositeRange<T, TKey>
			{
				Pattern = "CompositeRange<T([^>,]*?)>",
				Replacement = "CompositeRange<T$1, TKey>",
				ThrowOnFail = false,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // RangeIntersection<T, TKey>
			{
				Pattern = "RangeIntersection<T([^>,]*?)>",
				Replacement = "RangeIntersection<T$1, TKey>",
				ThrowOnFail = false,
				Match = MatchMode.WholeWord
			},
			new ReplaceInfo // SomeMethod<T, TKey2
			{
				Pattern = @"(static .+?)<T([^>]*?)>\(",
				Replacement = "$1<T, TKey$2>(",
				ThrowOnFail = false
			},
			new ReplaceInfo // Fix generic params XML docs
			{
				Pattern = @"(\r\n.+?)(<typeparam name=""T"">(?:.|\r|\n)*?</typeparam>)",
				Replacement = @"$1$2$1<typeparam name=""TKey"">The type of the range key</typeparam>",
				ThrowOnFail = false
			});
#>