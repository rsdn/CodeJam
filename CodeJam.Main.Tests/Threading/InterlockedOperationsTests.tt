<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
using System;
using System.Threading.Tasks;

using NUnit.Framework;

namespace CodeJam.Threading
{
	/// <summary>
	/// Provides a helper class for initializing a values in a thread-safe manner.
	/// </summary>
	[TestFixture(Category = "Threading")]
	public static class InterlockedOperationsTests
	{
<#
		WriteRegionLine("double overloads");
		EmitOverloadsFor("double", "1.0", "2.0");

		WriteRegionLine("float overloads");
		EmitOverloadsFor("float", "1.0f", "2.0f");

		WriteRegionLine("int overloads");
		EmitOverloadsFor("int", "1", "2");

		WriteRegionLine("long overloads");
		EmitOverloadsFor("long", "1L", "2L");

		WriteRegionLine("string overloads");
		EmitOverloadsFor("string", "\"A\"", "\"B\"");

		FlushRegions();
#>
	}
}<#+
		private void EmitOverloadsFor(string typeName, string valueA, string valueB)
		{
			var t = typeName;
			var tName = char.ToUpperInvariant(typeName[0]) + typeName.Substring(1);#>
		[Test]
		public static void Test<#=tName#>Initialize()
		{
			var field = default(<#=t#>);

			var init = InterlockedOperations.Initialize(ref field, <#=valueA#>);
			Assert.That(init, Is.EqualTo(<#=valueA#>));
			Assert.That(field, Is.EqualTo(<#=valueA#>));

			init = InterlockedOperations.Initialize(ref field, <#=valueB#>);
			Assert.That(init, Is.EqualTo(<#=valueA#>));
			Assert.That(field, Is.EqualTo(<#=valueA#>));

			init = InterlockedOperations.Initialize(ref field, <#=valueB#>, <#=valueA#>);
			Assert.That(init, Is.EqualTo(<#=valueB#>));
			Assert.That(field, Is.EqualTo(<#=valueB#>));

			init = InterlockedOperations.Initialize(ref field, <#=valueA#>, default(<#=t#>));
			Assert.That(init, Is.EqualTo(<#=valueB#>));
			Assert.That(field, Is.EqualTo(<#=valueB#>));

			init = InterlockedOperations.Initialize(ref field, <#=valueA#>, <#=valueB#>);
			Assert.That(init, Is.EqualTo(<#=valueA#>));
			Assert.That(field, Is.EqualTo(<#=valueA#>));
		}

		[Test]
		public static void Test<#=tName#>Update()
		{
			const [NonNegativeValue] int count = 1000;
			var field = default(<#=t#>);
			var a = <#=valueA#>;
			var b = <#=valueB#>;

			var updated = InterlockedOperations.Update(ref field, t => a);
			Assert.That(updated, Is.EqualTo(a));
			Assert.That(field, Is.EqualTo(a));

			updated = InterlockedOperations.Update(ref field, b, (t1, t2) => t1 + t2);
			Assert.That(updated, Is.EqualTo(a + b));
			Assert.That(field, Is.EqualTo(a + b));

			var sum = default(<#=t#>);
			for (int i = 0; i < count; i++)
			{
				sum += a;
			}

			field = default(<#=t#>);
			Parallel.For(
				0, count,
				i => InterlockedOperations.Update(ref field, a, (t1, t2) => t1 + t2));
			Assert.That(field, Is.EqualTo(sum));
		}
<#+}#>
